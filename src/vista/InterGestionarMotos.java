/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import conexion.ConectionDB;
import controlador.Ctrl_Moto;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.Modelo_Moto;

/**
 *
 * @author Edward
 */
public class InterGestionarMotos extends javax.swing.JInternalFrame {

    /**
     * Creates new form InterGestionarCategoria
     */
    private int idMotos;
    int obtenerIdCategoria = 0;
    String cilindrajeAux = "";
    String auxImagen = "";

    public InterGestionarMotos() {
        initComponents();
        this.setSize(new Dimension(940, 500));
        this.setTitle("GESTIONAR_MOTOCICLETAS");
        this.cargarTablaMotos();
        this.cargarCBOCategorias();
        this.setClosable(false);
        this.setIconifiable(false);
            this.setDefaultCloseOperation(JInternalFrame.DO_NOTHING_ON_CLOSE); //no permite el movimiento del internal
           ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null); // desactiva la abrra de titulo
    }

    //Para poner el logo de suzuki a escala en el bar menu
    private void fondoEtiqueta() {
        ImageIcon logo = new ImageIcon("src/Imagenes/GRIS.jpg");
        Icon icon = new ImageIcon(logo.getImage().getScaledInstance(940, 500, WIDTH));
        lblFondo.setIcon(icon);
        lblFondo.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        scrollCategorias = new javax.swing.JScrollPane();
        tablaMotos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        lblMoto = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        cboIva = new javax.swing.JComboBox<>();
        cboCategoria = new javax.swing.JComboBox<>();
        lblFondo = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Administrar Motocicletas");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 80, -1, -1));

        tablaMotos.setBackground(new java.awt.Color(204, 204, 255));
        tablaMotos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollCategorias.setViewportView(tablaMotos);

        getContentPane().add(scrollCategorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 170, 730, 270));

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnActualizar.setBackground(new java.awt.Color(0, 153, 153));
        btnActualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(255, 51, 51));
        btnEliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        lblMoto.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblMoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 25, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnActualizar))
                        .addGap(35, 35, 35))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnActualizar)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar)
                .addGap(33, 33, 33)
                .addComponent(lblMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 160, 170, 270));

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Categoria:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 50, 80, -1));

        txtDescripcion.setBackground(java.awt.Color.white);
        txtDescripcion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtDescripcion.setForeground(new java.awt.Color(0, 0, 0));
        jPanel3.add(txtDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 170, 25));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Nombre:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 15, 80, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Descripcion");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 55, 80, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Precio:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, 80, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Cantidad:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 15, 80, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Iva:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 12, 70, -1));

        txtPrecio.setBackground(java.awt.Color.white);
        txtPrecio.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtPrecio.setForeground(new java.awt.Color(0, 0, 0));
        jPanel3.add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 50, 170, 25));

        txtNombre.setBackground(java.awt.Color.white);
        txtNombre.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(0, 0, 0));
        jPanel3.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 170, 25));

        txtCantidad.setBackground(java.awt.Color.white);
        txtCantidad.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtCantidad.setForeground(new java.awt.Color(0, 0, 0));
        jPanel3.add(txtCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, 170, 25));

        cboIva.setBackground(java.awt.Color.white);
        cboIva.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cboIva.setForeground(new java.awt.Color(0, 0, 0));
        cboIva.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione IVA:", "Sin IVA", "12%", "16%" }));
        jPanel3.add(cboIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 10, 200, -1));

        cboCategoria.setBackground(java.awt.Color.white);
        cboCategoria.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cboCategoria.setForeground(new java.awt.Color(0, 0, 0));
        cboCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Categoria:" }));
        jPanel3.add(cboCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 50, 200, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 470, 870, 100));

        lblFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/FONDO7.jpg"))); // NOI18N
        getContentPane().add(lblFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -60, 1420, 830));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        Modelo_Moto moto = new Modelo_Moto();
        Ctrl_Moto ctrl_Moto = new Ctrl_Moto();

        String iva = "";
        String categoria = "";
        iva = cboIva.getSelectedItem().toString().trim();
        categoria = cboCategoria.getSelectedItem().toString().trim();

        if (txtNombre.getText().equals("") || txtCantidad.getText().equals("") || txtDescripcion.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Seleccione una motocicleta");
        } else
        {
            if (iva.equalsIgnoreCase("Seleccione IVA:"))
            {
                JOptionPane.showMessageDialog(null, "Seleccione IVA");
            } else
            {
                if (categoria.equalsIgnoreCase("Seleccione Categoria:"))
                {
                    JOptionPane.showMessageDialog(null, "Seleccione Una Categoria");
                } else
                {
                    try
                    {
                        moto.setNombre(txtNombre.getText().trim());

                        moto.setCantidad(Integer.parseInt(txtCantidad.getText().trim()));
                        String precioTxt = txtPrecio.getText().trim();
                        Double precioD = 0.0;
                        boolean aux = false;

                        //Asignar Precio
                        for (int i = 0; i < precioTxt.length(); i++)
                        {
                            if (precioTxt.charAt(i) == ',')
                            {
                                String precioNuevo = precioTxt.replace(",", ".");
                                precioD = Double.parseDouble(precioNuevo);
                                aux = true;
                            }
                        }

                        if (aux == true)
                        {
                            moto.setPrecio(precioD);
                        } else
                        {
                            precioD = Double.parseDouble(precioTxt);
                            moto.setPrecio(precioD);
                        }
                        //descripcion
                        moto.setDescripcion(txtDescripcion.getText().trim());
                        //Porcentaje IVA
                        if (iva.equalsIgnoreCase("Sin IVA"))
                        {
                            moto.setPorcentajeIva(0);
                        } else if (iva.equalsIgnoreCase("12%"))
                        {
                            moto.setPorcentajeIva(12);
                        } else if (iva.equalsIgnoreCase("16%"))
                        {
                            moto.setPorcentajeIva(16);
                        }

                        //cargar metodoIdCategoria
                        this.idCategoria();
                        moto.setIdCategoria(obtenerIdCategoria);
                        //estado

                        if (ctrl_Moto.actualizarMoto(moto, idMotos))
                        {
                            JOptionPane.showMessageDialog(null, "Se actualizo correctamente");
                            this.cargarCBOCategorias();
                            this.cargarTablaMotos();
                            this.limpiar();
                        } else
                        {
                            JOptionPane.showMessageDialog(null, "No se pudo actualizar");
                        }
                    } catch (HeadlessException | NumberFormatException e)
                    {
                        System.out.println("Error en: " + e);
                    }

                }
            }

        }


    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        Ctrl_Moto ctrl_moto = new Ctrl_Moto();
        if (idMotos == 0)
        {
            JOptionPane.showMessageDialog(null, "Selecciona una motocicleta");
        } else
        {
            if (!ctrl_moto.eliminarMotocicleta(idMotos))
            {
                JOptionPane.showMessageDialog(null, "Se elimino la motocicleta");
                this.cargarTablaMotos();
                this.cargarCBOCategorias();
                this.limpiar();

            } else
            {
                JOptionPane.showMessageDialog(null, "Error al eliminar  motocicleta");

            }

        }
    }//GEN-LAST:event_btnEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox<String> cboCategoria;
    private javax.swing.JComboBox<String> cboIva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JLabel lblMoto;
    public static javax.swing.JScrollPane scrollCategorias;
    public static javax.swing.JTable tablaMotos;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables

    //Metodo Limpiar 
    private void limpiar() {
        txtCantidad.setText(null);
        txtPrecio.setText(null);
        txtNombre.setText(null);
        txtDescripcion.setText(null);
        cboCategoria.setSelectedIndex(0);
        cboIva.setSelectedIndex(0);

    }

    //Metodo para asignar idCategoria
    private int idCategoria() {
        String sql = "select *from categoria where descripcion='" + cboCategoria.getSelectedItem() + "';";
        Statement st;
        try
        {
            Connection cx = ConectionDB.conectar();
            st = cx.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next())
            {
                obtenerIdCategoria = rs.getInt("id_categoria");
            }

        } catch (SQLException e)
        {
            System.out.println("Error al obtener categoria");
        }
        return obtenerIdCategoria;
    }

    //Metodo para motrar todas las motos registradas
    String descripcionCategoria = "";
    double precio = 0.0;
    int porcentajeIva = 0;
    double iva = 0;

    public void cargarTablaMotos() {
        Connection cx = conexion.ConectionDB.conectar();
        DefaultTableModel dfT = new DefaultTableModel();
        String sql = "select*from producto";
        Statement st;

        try
        {
            st = cx.createStatement();
            ResultSet rs = st.executeQuery(sql);
            InterGestionarMotos.tablaMotos = new JTable(dfT);
            InterGestionarMotos.scrollCategorias.setViewportView(InterGestionarMotos.tablaMotos);

            dfT.addColumn("ID");
            dfT.addColumn("Nombre");
            dfT.addColumn("Cilindraje");
            dfT.addColumn("Cantidad");
            dfT.addColumn("Precio");
            dfT.addColumn("Descripcion");
            dfT.addColumn("Iva");
            dfT.addColumn("Categoria");

            while (rs.next())
            {

                precio = rs.getDouble("precio");
                porcentajeIva = rs.getInt("porcentajeIva");
                Object fila[] = new Object[8];

                for (int i = 0; i < 8; i++)
                {

                    if (i == 6)
                    {
                        this.calcularIva(precio, porcentajeIva);
                        fila[i] = iva;
                        rs.getObject(i + 1);
                    } else
                    {
                        fila[i] = rs.getObject(i + 1);
                    }
                }
                dfT.addRow(fila);
            }
            cx.close();

        } catch (SQLException e)
        {
            System.out.println("Error al llenar la tabla productos " + e);
        }

        tablaMotos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = tablaMotos.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1)
                {
                    idMotos = (int) dfT.getValueAt(fila_point, columna_point);
                    enviarDatosMotoSeleccionada(idMotos);
                    asignarImagen();
                }
            }

        });
    }

    private Double calcularIva(Double precio, int porcentaje) {
        int p_iva = porcentaje;
        switch (p_iva)
        {
            case 0:
                iva = 0.0;
                break;
            case 12:
                iva = precio * 0.12;
                break;
            case 16:
                iva = precio * 16;
                break;
            default:
                break;
        }
        //redondear el IVa
        iva = (double) Math.round(iva * 100) / 100;
        return iva;
    }

    private void enviarDatosMotoSeleccionada(int idMoto) {
        Connection cx = conexion.ConectionDB.conectar();
        try
        {
            PreparedStatement pst = cx.prepareStatement(
                    "select * from producto where id_motocicleta='" + idMoto + "';");
            ResultSet rs = pst.executeQuery();

            if (rs.next())
            {
                txtDescripcion.setText(rs.getString("descripcion"));
                txtNombre.setText(rs.getString("nombre"));
                txtCantidad.setText(rs.getString("cantidad"));
                txtPrecio.setText(rs.getString("precio"));
                int iva_s = rs.getInt("porcentajeIva");
                cilindrajeAux = rs.getString("cilindraje");
                auxImagen = txtNombre.getText() + cilindrajeAux;
                switch (iva_s)
                {
                    case 0:
                        cboIva.setSelectedItem("Sin IVA");
                        break;
                    case 12:
                        cboIva.setSelectedItem("12%");
                        break;
                    case 16:
                        cboIva.setSelectedItem("16%");
                        break;
                    default:
                        cboIva.setSelectedItem("Seleccione IVA:");
                        break;
                }
                int idCat = rs.getInt("id_categoria");
                cboCategoria.setSelectedItem(relacionarCategorias(idCat));

            }
            cx.close();
        } catch (SQLException e)
        {
            System.out.println("Error al seleccionar motocicleta " + e);
        }
    }

    private String relacionarCategorias(int idCategoria) {
        String sql = "select *from categoria where idCategoria='" + idCategoria + "';";
        Statement st;

        try
        {
            Connection cx = ConectionDB.conectar();
            st = cx.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next())
            {
                descripcionCategoria = rs.getString("descripcion");
            }
            cx.close();
        } catch (SQLException e)
        {
            System.out.println("Error al obtener el id_categoria " + e);
        }
        return descripcionCategoria;
    }

    //Metodo asignar Imagen Moto
    private void asignarImagen() {
        ImageIcon logo = new ImageIcon("src/motos/" + auxImagen + ".png");
        Icon icon = new ImageIcon(logo.getImage().getScaledInstance(lblMoto.getWidth(), lblMoto.getHeight(), Image.SCALE_DEFAULT));
        lblMoto.setIcon(icon);
        //lblMoto.repaint();
    }

    //Metodo para llenar el comboBox
    private void cargarCBOCategorias() {
        Connection cx = ConectionDB.conectar();
        String sql = "select *from categoria";
        Statement st;

        try
        {
            st = cx.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next())
            {
                cboCategoria.addItem(rs.getString("descripcion"));
            }
            cx.close();
        } catch (SQLException e)
        {
            System.out.println("Error al cargar categorias al comboBox " + e);
        }
    }

}
